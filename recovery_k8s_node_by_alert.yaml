---
# get values from awx_webhook_payload 
# awx_webhook_payload.alerts[0].labels.node - will point to node on which alert firing 
# awx_webhook_payload.alerts[0].annotations.description - will point to an alert description
#  - will point an alert start time 
  - hosts: "{{ node_name }}"
    become: true
    gather_facts: true
    vars:
      alert_start: "{{ awx_webhook_payload.alerts[0].startsAt }}"
      alert_descr: "{{ awx_webhook_payload.alerts[0].annotations.description }}"
      alert_name: "{{ awx_webhook_payload.alerts[0].labels.alertname }}"
    tasks:
      - name: "write alert debug info"
        debug:
          msg:
            - "{{ alert_name }}"
            - "{{ alert_start }}"
            - "{{ alert_descr }}"      
      - block:
        - name: "get possible reasons for an alert"
          debug:
            msg:
              - "possible systemd services degraded: kubelet, containerd"
  
        - name: "get systemd services state - possible causing  node unready state"
          ansible.builtin.systemd:
            name: "{{ item }}"
          loop:
            - containerd
            - kubelet
          register: svc_status

        - name: "show systemd service name if it is inactive"
          debug:
            msg:
              - "failed service detected:" 
              - "{{ item.name }}"
          when: item.status.ActiveState == "inactive"
          loop:  "{{ svc_status.results }}"

        - name: "trying to restart systemd service if it is inactive"
          ansible.builtin.service:
            name: "{{ item.name }}"
            state: restarted
          when: item.status.ActiveState == "inactive"
          loop:  "{{ svc_status.results }}"

        - name: "get systemd services state  after restart"
          ansible.builtin.systemd:
            name: "{{ item }}"
          loop:
            - containerd
            - kubelet
          register: svc_postrestart_status

        - name: "show systemd service state after restarting"
          debug:
            msg:
              - "service state:" 
              - "{{ item.name }}: {{ item.status.ActiveState }}"
          loop:  "{{ svc_postrestart_status.results }}"

        when: alert_name is search("KubernetesNodeReady")
  

